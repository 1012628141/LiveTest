<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx         
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">

    <aop:aspectj-autoproxy/>

    <context:component-scan base-package="com.readyidu"/>

    <context:property-placeholder location="classpath*:properties/**.properties"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
    <property name="maxIdle" value="300"/>
    <!-- 最大能够保持idel状态的对象数  -->
    <property name="maxTotal" value="60000"/>
    <!-- 最大分配的对象数 -->
    <property name="testOnBorrow" value="true"/>
    <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
    </bean>
    <bean id="cachePool" class="redis.clients.jedis.JedisPool">
    <constructor-arg index="0" ref="jedisPoolConfig"/>
    <constructor-arg index="1" value="${redis_host}"/>
    <constructor-arg index="2" value="${redis_port}" type="int"/>
    <constructor-arg index="3" value="${redis_timeout}"/>
    <constructor-arg index="4" value="${redis_pwd}"/>
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <property name="maxWait" value="60000"/>
        <!-- 检查一次连接池中空闲的连接 把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开,直到连接池中的连接数到minIdle为止 -->
        <property name="timeBetweenEvictionRunsMillis" value="600000"/>
        <!-- 连接池中连接可空闲的时间 毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="3600000"/>
        <!-- 开启池的prepared -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="validationQuery" value="/* ping */SELECT 1"></property>
    </bean>
    <!-- 事务处理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- sqlSessionFactory配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:com/readyidu/dao/**/*.xml"></property>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.readyidu.**.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis_host}"/>
        <property name="port" value="${redis_port}"/>
        <property name="password" value="${redis_pwd}"/>
    </bean>

    <!--这里添加的是Redis，因为使用的是Spring里自带的Redis的Session策略 -->
    <bean id="v2redisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis_host}" p:port="${redis_port}" p:password="${redis_pwd}" p:usePool="true" p:database="8"/>

    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="v2redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="v2redisConnectionFactory"
          p:keySerializer-ref="stringRedisSerializer" p:valueSerializer-ref="stringRedisSerializer"
          p:hashKeySerializer-ref="stringRedisSerializer"
          p:hashValueSerializer-ref="stringRedisSerializer"/>
    <!-- 这里的是为了下面的 Session策略过滤器提供构造函数传入的参数，因为Session过滤器要依赖该对象来构造，所以创建一个先 -->
    <bean name="redisOperationsSessionRepository"
          class="org.springframework.session.data.redis.RedisOperationsSessionRepository">
        <constructor-arg ref="v2redisConnectionFactory"/>
    </bean>

    <!-- 这个是Session策略过滤器，即将容器原有的Session持久化机制，代替为Spring的 Redis持久化Session机制。 -->
    <!-- 注意，这个名字与 web.xml里的targetBean的下value是要一致的。 -->
    <bean name="yunSession" class="org.springframework.session.web.http.SessionRepositoryFilter">
        <constructor-arg ref="redisOperationsSessionRepository"/>
        <property name="httpSessionStrategy">
            <bean class="org.springframework.session.web.http.CookieHttpSessionStrategy">
                <property name="cookieName" value="yunSessionid"/>
            </bean>
        </property>
    </bean>
    <!-- 保存上下文 -->
    <bean class="com.readyidu.util.ApplicationContextRegister"/>

</beans>